// Code generated by go-bindata.
// sources:
// store/migrations/1533636853_initial.down.sql
// store/migrations/1533636853_initial.up.sql
// store/migrations/1537263282_add_review_target.down.sql
// store/migrations/1537263282_add_review_target.up.sql
// store/migrations/1537263364_add_analyzer_name_to_comment.down.sql
// store/migrations/1537263364_add_analyzer_name_to_comment.up.sql
// store/migrations/lock.json
// DO NOT EDIT!

package store

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1533636853_initialDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x72\x75\xf7\xf4\xb3\xe6\xe2\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\x28\x2d\xce\x88\x4f\x2d\x4b\xcd\x2b\x41\x15\x4f\xce\xcf\xcd\xc5\x10\x2c\x4a\x2d\xcb\x4c\x2d\x87\x2b\x77\xf6\xf7\xf5\xf5\x0c\xb1\xe6\x02\x04\x00\x00\xff\xff\x67\xfb\x73\x7b\x57\x00\x00\x00")

func _1533636853_initialDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1533636853_initialDownSql,
		"1533636853_initial.down.sql",
	)
}

func _1533636853_initialDownSql() (*asset, error) {
	bytes, err := _1533636853_initialDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1533636853_initial.down.sql", size: 87, mode: os.FileMode(484), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1533636853_initialUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x92\x4d\x6e\xc2\x30\x10\x85\xd7\xf1\x29\x66\x09\x12\x37\x60\x05\xc8\xad\x50\x21\x54\x69\xba\x60\x15\x39\xf1\x10\xa6\x4a\xec\xc8\x1e\xd3\x9f\xd3\x57\x41\x6a\x15\x70\x2a\xda\x5d\xb7\xef\x7d\x51\xf4\xfc\xcd\x52\xde\xaf\xd3\xb9\x10\xab\x4c\x2e\x72\x09\xf9\x62\xb9\x91\xe0\xf0\x44\xf8\x5a\xe0\x09\x0d\xc3\x44\x24\xa4\x21\x04\xd2\x90\xee\x72\x48\x9f\x37\x1b\x78\xcc\xd6\xdb\x45\xb6\x87\x07\xb9\x9f\x89\xc4\xb3\xe2\xe0\x81\xf1\x8d\xbf\x91\x99\x48\x3a\x67\x4f\xa4\xd1\x45\x05\x19\x46\x67\x54\x53\x90\x8e\xba\xca\xa1\x62\xd4\x85\x62\x60\x6a\xd1\xb3\x6a\x3b\xfe\x18\x12\xa1\xd3\x37\x08\xf2\x45\x8b\xae\x46\x55\x36\x08\xa5\xb5\x0d\x2a\x33\xec\xbd\x0d\xae\x42\x78\xf1\xd6\x94\xc3\xfc\xfc\x51\x1c\x57\xd6\x1c\xa8\x0e\x4e\x31\x59\x13\xd7\x0e\x3b\xeb\x89\xad\x7b\xef\xf7\x94\x54\x93\xb9\x58\x64\x42\x5b\xa2\x1b\x29\x4a\xe5\x47\xfe\x76\x44\xa5\xaf\x52\x31\x9d\x8b\x2b\x43\x95\x6d\xdb\xdf\xc9\x19\xba\x2c\xbe\xd8\x4c\xde\xc9\x4c\xa6\x2b\xf9\x74\xe1\x7a\x42\x7a\x3a\x13\xc9\x81\x1a\x8c\xc4\x34\x64\x10\x7a\x73\x35\xba\x61\x7e\xe6\x22\x8b\xfd\x93\x69\x34\x15\x5e\xef\x1e\xd9\xd2\x05\x7f\xfc\xa7\xb7\xd6\x3f\x33\xb1\x1f\x91\xa7\xc9\x33\x99\x8a\x8b\x9f\x91\x1b\x77\xf3\x57\xfd\xbb\xed\x76\x9d\xcf\xc5\x67\x00\x00\x00\xff\xff\xcc\xfa\xa2\x3d\xb1\x03\x00\x00")

func _1533636853_initialUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1533636853_initialUpSql,
		"1533636853_initial.up.sql",
	)
}

func _1533636853_initialUpSql() (*asset, error) {
	bytes, err := _1533636853_initialUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1533636853_initial.up.sql", size: 945, mode: os.FileMode(484), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1537263282_add_review_targetDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x72\x75\xf7\xf4\xb3\xe6\xe2\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\x4a\x2d\xcb\x4c\x2d\x8f\x2f\x49\x2c\x4a\x4f\x2d\xb1\xe6\xe2\x72\xf4\x09\x71\x0d\x42\x95\x4b\x2d\x4b\xcd\x2b\x51\x00\xeb\x71\xf6\xf7\x09\xf5\xf5\x43\xd5\x14\x9f\x99\x62\xcd\xc5\xe5\xec\xef\xeb\xeb\x19\x62\xcd\x05\x08\x00\x00\xff\xff\x98\x70\xa0\x61\x63\x00\x00\x00")

func _1537263282_add_review_targetDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1537263282_add_review_targetDownSql,
		"1537263282_add_review_target.down.sql",
	)
}

func _1537263282_add_review_targetDownSql() (*asset, error) {
	bytes, err := _1537263282_add_review_targetDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1537263282_add_review_target.down.sql", size: 99, mode: os.FileMode(484), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1537263282_add_review_targetUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcf\xc1\x4a\x03\x31\x10\xc6\xf1\xf3\xce\x53\xcc\xb1\x42\xdf\x60\x4f\x69\x3a\xca\x62\x92\x95\x98\x1e\x7a\x5a\x5a\x32\x94\x01\xcd\x96\x31\xbb\xea\xdb\x4b\x0f\x0a\xb1\xe7\xdf\xc7\x30\xff\x1d\x3d\x0d\xa1\x07\xb0\x91\x4c\x22\x4c\x66\xe7\x08\x95\x57\xe1\xcf\xa9\x9e\xf4\xc2\x15\x37\xd0\x49\xc6\x65\x91\x8c\x61\x4c\x18\x0e\xce\xe1\x4b\x1c\xbc\x89\x47\x7c\xa6\xe3\x16\xba\xab\xce\xab\x64\x56\xac\xfc\x55\xff\x46\x5b\xe8\xa4\x54\xd6\x72\x7a\x9b\x24\xdf\x99\xf2\x75\xfe\x90\x3a\xeb\xf7\x4d\xcf\x72\x91\xd2\x78\x59\xde\xcf\xac\xff\x01\x1e\x7a\x00\x30\x2e\x51\x6c\x9f\xe5\x95\x4b\x45\xb3\xdf\xa3\x1d\xdd\xc1\x87\x36\x62\xfa\x2d\x88\xf4\x48\x91\x82\xa5\xd7\x76\xb0\x91\x7c\xbb\x6c\x47\xef\x87\xd4\xc3\x4f\x00\x00\x00\xff\xff\x84\xdb\xa3\xdf\x17\x01\x00\x00")

func _1537263282_add_review_targetUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1537263282_add_review_targetUpSql,
		"1537263282_add_review_target.up.sql",
	)
}

func _1537263282_add_review_targetUpSql() (*asset, error) {
	bytes, err := _1537263282_add_review_targetUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1537263282_add_review_target.up.sql", size: 279, mode: os.FileMode(484), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1537263364_add_analyzer_name_to_commentDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x72\x75\xf7\xf4\xb3\xe6\xe2\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\xce\xcf\xcd\x4d\xcd\x2b\x51\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\x48\xcc\x4b\xcc\xa9\xac\x4a\x2d\xb2\xe6\xe2\x72\xf6\xf7\xf5\xf5\x0c\xb1\xe6\x02\x04\x00\x00\xff\xff\x76\x3b\xa0\x17\x3b\x00\x00\x00")

func _1537263364_add_analyzer_name_to_commentDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1537263364_add_analyzer_name_to_commentDownSql,
		"1537263364_add_analyzer_name_to_comment.down.sql",
	)
}

func _1537263364_add_analyzer_name_to_commentDownSql() (*asset, error) {
	bytes, err := _1537263364_add_analyzer_name_to_commentDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1537263364_add_analyzer_name_to_comment.down.sql", size: 59, mode: os.FileMode(484), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1537263364_add_analyzer_name_to_commentUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x41\x0a\x02\x31\x0c\x05\xd0\x7d\x4e\xf1\x77\x73\x88\xae\x3a\x33\x45\x0a\x69\x0a\x92\x1e\xa0\x68\x5c\xb5\x15\x24\x82\x7a\x7a\xdf\x9e\x2e\x59\x02\x51\x64\x4d\x57\x68\xdc\x39\xe1\xf6\x9c\xd3\x96\x23\x9e\x27\x8e\xca\xad\x08\xfa\xea\xe3\xfb\xb3\x17\xdc\x3e\x0e\xa9\x0a\x69\xcc\xb8\xdb\xa3\xbf\x87\x63\xdb\x02\xd1\x51\x4b\xc9\x1a\xe8\x1f\x00\x00\xff\xff\x53\x1d\x19\xb7\x53\x00\x00\x00")

func _1537263364_add_analyzer_name_to_commentUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1537263364_add_analyzer_name_to_commentUpSql,
		"1537263364_add_analyzer_name_to_comment.up.sql",
	)
}

func _1537263364_add_analyzer_name_to_commentUpSql() (*asset, error) {
	bytes, err := _1537263364_add_analyzer_name_to_commentUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1537263364_add_analyzer_name_to_comment.up.sql", size: 83, mode: os.FileMode(484), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _lockJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xc1\x8e\xda\x30\x10\xbd\xf3\x15\x56\xce\xfb\x05\x5c\x7b\xac\x84\xaa\x6a\x7b\xaa\xaa\x68\x92\x0c\xd9\xa9\xec\x71\x6a\x8f\x69\xb3\x2b\xfe\xbd\x22\x65\x29\x09\x71\xe9\xb2\x12\x98\x28\x17\x14\x65\x34\xcc\x7b\xcf\xce\xbc\xb1\x5f\x16\x4a\x65\x8f\x50\x68\xf4\xd9\x52\x7d\x5d\x28\xa5\xd4\x4b\xf7\xab\x54\xb6\x02\x83\xd9\x52\x65\xa5\x35\x06\x59\xb2\x87\xd7\xc0\x07\xab\x83\xe1\xbf\x19\xc7\x59\xbd\x4c\xaa\x0e\x49\xdd\xfb\xc7\xb6\xe9\xde\x87\x30\x8c\x7c\x72\x64\xc0\xb5\x1f\xb1\xcd\x96\x4a\x5c\xc0\x5e\xf4\x33\xae\xd1\x21\x97\xbb\x64\x0e\x5a\xf7\x82\x2b\x2b\xab\xa0\xf5\x58\xde\x17\xa6\x1f\x61\x97\xb4\x06\xed\xf1\x10\xd9\x3e\xfc\x1b\xb6\xc3\x0d\xe1\xcf\x1c\x37\xc8\x92\x5f\xc8\xa1\xab\x18\x25\x71\x5c\xf6\x75\x05\x86\x95\x7b\x7f\x7e\x50\x7d\x2f\xeb\x51\x68\x1b\x51\xe3\x14\xc1\x85\x72\xac\x49\xe3\xb8\x06\x82\xbf\xe4\x62\x0d\xae\xb0\x90\x9a\x38\x82\x9c\x58\xb0\x46\x97\x32\xf8\x53\x71\xef\x45\xf6\xd2\xf2\x9a\xaa\xae\xde\x28\xfe\x82\x6a\xe2\xa4\x19\x00\x83\x6e\x9f\x87\xfb\x23\x19\xfd\xf7\x4f\xdf\x16\x47\x5c\x4e\xda\x76\x13\xfc\xd3\xa0\x93\x4c\xbe\x73\x7b\x01\x09\x3e\xd1\x55\x3b\x83\xbd\x71\x76\x43\x55\xb2\x7b\xee\x0c\xfa\x5d\x43\x75\x0c\x3a\xea\x97\xa9\x13\x28\x1d\x82\x60\x95\x43\xac\xe9\x92\x41\x2f\x60\x1a\x79\x4e\x9a\x86\x35\x86\x24\xf2\x09\xa4\xdf\x78\x2b\xf2\x42\x5c\x4a\x7e\xe7\x3c\x3a\x0b\xac\x83\x03\x21\xcb\xe3\x24\xbe\x7b\xcb\x45\xca\x1c\x0a\xf0\x11\x03\x4f\x1e\xfa\x13\x42\xa4\x0d\xdd\x1e\xfa\x7f\x99\xf7\xe8\x41\x60\xb6\xef\x84\xb7\xdc\x6c\xdf\xb3\x7d\xbf\x9f\x46\x68\xaa\x29\xd0\x20\x9f\x1b\x74\x35\x76\xf7\x1a\xe3\x16\x6e\xad\x46\xe0\x94\x49\x78\x1b\x5c\xec\x08\x7b\x7b\x1b\x39\x03\xbe\x93\xff\x4e\xb1\x4f\x61\x78\x72\xd8\x58\x4f\x62\x5d\x1b\x6d\xa9\xe9\x4f\xb1\x1c\x4c\x11\x73\xb4\xf4\xd1\xcf\xf3\xeb\x2d\xa0\xef\x27\x57\x01\x57\xe3\x6d\x6e\xcf\xff\x94\xbe\xde\xf5\xf9\x5b\x06\xfa\x01\xb6\xc9\x4f\xf4\xf3\x54\x3c\xbb\xd0\x7b\x49\x24\xee\x42\xfd\xcf\x7f\xb1\x7b\xda\xfe\x0e\x00\x00\xff\xff\xe0\x89\xad\xe1\x58\x1d\x00\x00")

func lockJsonBytes() ([]byte, error) {
	return bindataRead(
		_lockJson,
		"lock.json",
	)
}

func lockJson() (*asset, error) {
	bytes, err := lockJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lock.json", size: 7512, mode: os.FileMode(484), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1533636853_initial.down.sql": _1533636853_initialDownSql,
	"1533636853_initial.up.sql": _1533636853_initialUpSql,
	"1537263282_add_review_target.down.sql": _1537263282_add_review_targetDownSql,
	"1537263282_add_review_target.up.sql": _1537263282_add_review_targetUpSql,
	"1537263364_add_analyzer_name_to_comment.down.sql": _1537263364_add_analyzer_name_to_commentDownSql,
	"1537263364_add_analyzer_name_to_comment.up.sql": _1537263364_add_analyzer_name_to_commentUpSql,
	"lock.json": lockJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"1533636853_initial.down.sql": &bintree{_1533636853_initialDownSql, map[string]*bintree{}},
	"1533636853_initial.up.sql": &bintree{_1533636853_initialUpSql, map[string]*bintree{}},
	"1537263282_add_review_target.down.sql": &bintree{_1537263282_add_review_targetDownSql, map[string]*bintree{}},
	"1537263282_add_review_target.up.sql": &bintree{_1537263282_add_review_targetUpSql, map[string]*bintree{}},
	"1537263364_add_analyzer_name_to_comment.down.sql": &bintree{_1537263364_add_analyzer_name_to_commentDownSql, map[string]*bintree{}},
	"1537263364_add_analyzer_name_to_comment.up.sql": &bintree{_1537263364_add_analyzer_name_to_commentUpSql, map[string]*bintree{}},
	"lock.json": &bintree{lockJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

