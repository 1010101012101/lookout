syntax = "proto3";
package pb;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "event.proto";

option (gogoproto.goproto_getters_all) = false;
option (gogoproto.sizer_all) = false;
option (gogoproto.protosizer_all) = true;

// Analyzer service should be implemented by analyzers to receive events from
// the server. It is currently implemented as a single long-lived request, so
// cancellation is managed at gRPC level. Depending on how we plan to implement
// the server, we might want to implement sending results as a callback. For
// now, this is kept simple.
service Analyzer {
    rpc NotifyReviewEvent (ReviewEvent) returns (EventResponse);
    rpc NotifyPushEvent (PushEvent) returns (EventResponse);
}

message EventResponse {
    repeated Comment comments = 1;
    // repeated Patch patches = 2;
}

// Comment is a comment on a commit or changeset.
message Comment {
    // File this comment belongs to. If empty, it is a global comment.
    string file = 1;
    // Line this comment refers to. If 0 (and file is set), it is a
    // file-level comment. Line is expressed aqs a 1-based index.
    int32 line = 2;
    // Text of the comment.
    string text = 3;
    // Confidence in the comment. It should be an integer between 0 and 100.
    uint32 confidence = 4;
}
