// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: service_data.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import gopkg_in_bblfsh_sdk_v1_uast "gopkg.in/bblfsh/sdk.v1/uast"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type File struct {
	// File path.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// POSIX-style file mode.
	Mode uint32 `protobuf:"varint,2,opt,name=mode,proto3" json:"mode,omitempty"`
	// Hash of the file contents.
	Hash string `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	// Raw content of the file.
	Content []byte `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	// UAST.
	UAST *gopkg_in_bblfsh_sdk_v1_uast.Node `protobuf:"bytes,5,opt,name=uast" json:"uast,omitempty"`
}

func (m *File) Reset()                    { *m = File{} }
func (m *File) String() string            { return proto.CompactTextString(m) }
func (*File) ProtoMessage()               {}
func (*File) Descriptor() ([]byte, []int) { return fileDescriptorServiceData, []int{0} }

type Change struct {
	Base *File `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	Head *File `protobuf:"bytes,2,opt,name=head" json:"head,omitempty"`
}

func (m *Change) Reset()                    { *m = Change{} }
func (m *Change) String() string            { return proto.CompactTextString(m) }
func (*Change) ProtoMessage()               {}
func (*Change) Descriptor() ([]byte, []int) { return fileDescriptorServiceData, []int{1} }

type ChangesRequest struct {
	Base           *ReferencePointer `protobuf:"bytes,2,opt,name=base" json:"base,omitempty"`
	Head           *ReferencePointer `protobuf:"bytes,3,opt,name=head" json:"head,omitempty"`
	IncludePattern string            `protobuf:"bytes,4,opt,name=include_pattern,json=includePattern,proto3" json:"include_pattern,omitempty"`
	ExcludePattern string            `protobuf:"bytes,5,opt,name=exclude_pattern,json=excludePattern,proto3" json:"exclude_pattern,omitempty"`
	ChangedOnly    bool              `protobuf:"varint,6,opt,name=changed_only,json=changedOnly,proto3" json:"changed_only,omitempty"`
	WantContents   bool              `protobuf:"varint,7,opt,name=want_contents,json=wantContents,proto3" json:"want_contents,omitempty"`
	WantUAST       bool              `protobuf:"varint,8,opt,name=want_uast,json=wantUast,proto3" json:"want_uast,omitempty"`
}

func (m *ChangesRequest) Reset()                    { *m = ChangesRequest{} }
func (m *ChangesRequest) String() string            { return proto.CompactTextString(m) }
func (*ChangesRequest) ProtoMessage()               {}
func (*ChangesRequest) Descriptor() ([]byte, []int) { return fileDescriptorServiceData, []int{2} }

func init() {
	proto.RegisterType((*File)(nil), "pb.File")
	proto.RegisterType((*Change)(nil), "pb.Change")
	proto.RegisterType((*ChangesRequest)(nil), "pb.ChangesRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Data service

type DataClient interface {
	GetChanges(ctx context.Context, in *ChangesRequest, opts ...grpc.CallOption) (Data_GetChangesClient, error)
}

type dataClient struct {
	cc *grpc.ClientConn
}

func NewDataClient(cc *grpc.ClientConn) DataClient {
	return &dataClient{cc}
}

func (c *dataClient) GetChanges(ctx context.Context, in *ChangesRequest, opts ...grpc.CallOption) (Data_GetChangesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Data_serviceDesc.Streams[0], c.cc, "/pb.Data/GetChanges", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataGetChangesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Data_GetChangesClient interface {
	Recv() (*Change, error)
	grpc.ClientStream
}

type dataGetChangesClient struct {
	grpc.ClientStream
}

func (x *dataGetChangesClient) Recv() (*Change, error) {
	m := new(Change)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Data service

type DataServer interface {
	GetChanges(*ChangesRequest, Data_GetChangesServer) error
}

func RegisterDataServer(s *grpc.Server, srv DataServer) {
	s.RegisterService(&_Data_serviceDesc, srv)
}

func _Data_GetChanges_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChangesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataServer).GetChanges(m, &dataGetChangesServer{stream})
}

type Data_GetChangesServer interface {
	Send(*Change) error
	grpc.ServerStream
}

type dataGetChangesServer struct {
	grpc.ServerStream
}

func (x *dataGetChangesServer) Send(m *Change) error {
	return x.ServerStream.SendMsg(m)
}

var _Data_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Data",
	HandlerType: (*DataServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetChanges",
			Handler:       _Data_GetChanges_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service_data.proto",
}

func (m *File) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *File) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintServiceData(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if m.Mode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintServiceData(dAtA, i, uint64(m.Mode))
	}
	if len(m.Hash) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintServiceData(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintServiceData(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if m.UAST != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintServiceData(dAtA, i, uint64(m.UAST.ProtoSize()))
		n1, err := m.UAST.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *Change) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Change) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Base != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintServiceData(dAtA, i, uint64(m.Base.ProtoSize()))
		n2, err := m.Base.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Head != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintServiceData(dAtA, i, uint64(m.Head.ProtoSize()))
		n3, err := m.Head.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *ChangesRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Base != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintServiceData(dAtA, i, uint64(m.Base.ProtoSize()))
		n4, err := m.Base.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Head != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintServiceData(dAtA, i, uint64(m.Head.ProtoSize()))
		n5, err := m.Head.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.IncludePattern) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintServiceData(dAtA, i, uint64(len(m.IncludePattern)))
		i += copy(dAtA[i:], m.IncludePattern)
	}
	if len(m.ExcludePattern) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintServiceData(dAtA, i, uint64(len(m.ExcludePattern)))
		i += copy(dAtA[i:], m.ExcludePattern)
	}
	if m.ChangedOnly {
		dAtA[i] = 0x30
		i++
		if m.ChangedOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.WantContents {
		dAtA[i] = 0x38
		i++
		if m.WantContents {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.WantUAST {
		dAtA[i] = 0x40
		i++
		if m.WantUAST {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintServiceData(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *File) ProtoSize() (n int) {
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovServiceData(uint64(l))
	}
	if m.Mode != 0 {
		n += 1 + sovServiceData(uint64(m.Mode))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovServiceData(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovServiceData(uint64(l))
	}
	if m.UAST != nil {
		l = m.UAST.ProtoSize()
		n += 1 + l + sovServiceData(uint64(l))
	}
	return n
}

func (m *Change) ProtoSize() (n int) {
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.ProtoSize()
		n += 1 + l + sovServiceData(uint64(l))
	}
	if m.Head != nil {
		l = m.Head.ProtoSize()
		n += 1 + l + sovServiceData(uint64(l))
	}
	return n
}

func (m *ChangesRequest) ProtoSize() (n int) {
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.ProtoSize()
		n += 1 + l + sovServiceData(uint64(l))
	}
	if m.Head != nil {
		l = m.Head.ProtoSize()
		n += 1 + l + sovServiceData(uint64(l))
	}
	l = len(m.IncludePattern)
	if l > 0 {
		n += 1 + l + sovServiceData(uint64(l))
	}
	l = len(m.ExcludePattern)
	if l > 0 {
		n += 1 + l + sovServiceData(uint64(l))
	}
	if m.ChangedOnly {
		n += 2
	}
	if m.WantContents {
		n += 2
	}
	if m.WantUAST {
		n += 2
	}
	return n
}

func sovServiceData(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozServiceData(x uint64) (n int) {
	return sovServiceData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *File) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: File: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: File: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServiceData
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UAST", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UAST == nil {
				m.UAST = &gopkg_in_bblfsh_sdk_v1_uast.Node{}
			}
			if err := m.UAST.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Change) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Change: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Change: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &File{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &File{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &ReferencePointer{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &ReferencePointer{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludePattern", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IncludePattern = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludePattern", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExcludePattern = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangedOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChangedOnly = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WantContents", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WantContents = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WantUAST", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WantUAST = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipServiceData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipServiceData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowServiceData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServiceData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServiceData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthServiceData
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowServiceData
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipServiceData(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthServiceData = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowServiceData   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("service_data.proto", fileDescriptorServiceData) }

var fileDescriptorServiceData = []byte{
	// 480 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xb3, 0xa9, 0x9b, 0x3a, 0x9b, 0xb4, 0x48, 0x2b, 0x0e, 0x56, 0x84, 0x5c, 0x37, 0x1c,
	0x30, 0x42, 0xac, 0x21, 0x48, 0x5c, 0x11, 0x69, 0x05, 0x37, 0xa8, 0x0c, 0x15, 0xc7, 0x68, 0x6d,
	0x4f, 0x6c, 0xab, 0xee, 0xae, 0xf1, 0xae, 0x03, 0x7d, 0x0b, 0x5e, 0x00, 0x89, 0x2b, 0x6f, 0xd2,
	0x23, 0x4f, 0x50, 0x81, 0xfb, 0x22, 0x68, 0xd7, 0x1b, 0xa1, 0x5c, 0xb8, 0xcd, 0xfc, 0xf3, 0xcd,
	0xe8, 0xf7, 0xef, 0xc5, 0x44, 0x42, 0xb3, 0x29, 0x53, 0x58, 0x65, 0x4c, 0x31, 0x5a, 0x37, 0x42,
	0x09, 0x32, 0xac, 0x93, 0xd9, 0xd3, 0xbc, 0x54, 0x45, 0x9b, 0xd0, 0x54, 0x5c, 0x45, 0xb9, 0xc8,
	0x45, 0x64, 0x46, 0x49, 0xbb, 0x36, 0x9d, 0x69, 0x4c, 0xd5, 0xaf, 0xcc, 0x9e, 0xe4, 0xa2, 0xbe,
	0xcc, 0x69, 0xc9, 0xa3, 0x24, 0xa9, 0xd6, 0xb2, 0x88, 0x64, 0x76, 0x49, 0x37, 0xcf, 0xa3, 0x96,
	0x49, 0x15, 0xe5, 0xc0, 0xa1, 0x61, 0x0a, 0x32, 0x0b, 0x4f, 0x60, 0x03, 0x5c, 0xf5, 0xcd, 0xfc,
	0x3b, 0xc2, 0xce, 0x9b, 0xb2, 0x02, 0x42, 0xb0, 0x53, 0x33, 0x55, 0x78, 0x28, 0x40, 0xe1, 0x38,
	0x36, 0xb5, 0xd6, 0xae, 0x44, 0x06, 0xde, 0x30, 0x40, 0xe1, 0x61, 0x6c, 0x6a, 0xad, 0x15, 0x4c,
	0x16, 0xde, 0x5e, 0xcf, 0xe9, 0x9a, 0x78, 0xf8, 0x20, 0x15, 0x5c, 0x01, 0x57, 0x9e, 0x13, 0xa0,
	0x70, 0x1a, 0x6f, 0x5b, 0xf2, 0x0a, 0x3b, 0xda, 0x83, 0xb7, 0x1f, 0xa0, 0x70, 0xb2, 0x38, 0xa1,
	0x5b, 0x9f, 0xb4, 0xf7, 0x49, 0x7b, 0x9f, 0x54, 0x33, 0xf4, 0x9d, 0xc8, 0x60, 0xe9, 0x76, 0xb7,
	0xc7, 0xce, 0xc5, 0xeb, 0x0f, 0x1f, 0x63, 0xb3, 0x38, 0x3f, 0xc3, 0xa3, 0xd3, 0x82, 0xf1, 0x1c,
	0xc8, 0x03, 0xec, 0x24, 0x4c, 0x82, 0x31, 0x38, 0x59, 0xb8, 0xb4, 0x4e, 0xa8, 0x36, 0x1e, 0x1b,
	0x55, 0x4f, 0x0b, 0x60, 0x99, 0xb1, 0xba, 0x33, 0xd5, 0xea, 0xfc, 0xe7, 0x10, 0x1f, 0xf5, 0x67,
	0x64, 0x0c, 0x9f, 0x5b, 0x90, 0x8a, 0x84, 0xf6, 0x5c, 0xbf, 0x70, 0x5f, 0x2f, 0xc4, 0xb0, 0x86,
	0x06, 0x78, 0x0a, 0xe7, 0xa2, 0xe4, 0x0a, 0x1a, 0x7b, 0x3a, 0xb4, 0xa7, 0xf7, 0xfe, 0x47, 0x6a,
	0x82, 0x3c, 0xc2, 0xf7, 0x4a, 0x9e, 0x56, 0x6d, 0x06, 0xab, 0x9a, 0x29, 0x05, 0x0d, 0x37, 0x79,
	0x8c, 0xe3, 0x23, 0x2b, 0x9f, 0xf7, 0xaa, 0x06, 0xe1, 0xeb, 0x2e, 0xb8, 0xdf, 0x83, 0x56, 0xde,
	0x82, 0x27, 0x78, 0x9a, 0x1a, 0xdf, 0xd9, 0x4a, 0xf0, 0xea, 0xda, 0x1b, 0x05, 0x28, 0x74, 0xe3,
	0x89, 0xd5, 0xde, 0xf3, 0xea, 0x9a, 0x3c, 0xc4, 0x87, 0x5f, 0x18, 0x57, 0x2b, 0x1b, 0xb9, 0xf4,
	0x0e, 0x0c, 0x33, 0xd5, 0xe2, 0xa9, 0xd5, 0xc8, 0x63, 0x3c, 0x36, 0x90, 0xf9, 0x19, 0xae, 0x06,
	0x96, 0xd3, 0xee, 0xf6, 0xd8, 0xfd, 0xc4, 0xb8, 0x32, 0x69, 0xbb, 0x7a, 0x7c, 0xc1, 0xa4, 0x5a,
	0xbc, 0xc4, 0xce, 0x19, 0x53, 0x8c, 0x50, 0x8c, 0xdf, 0x82, 0xb2, 0xa9, 0x11, 0xa2, 0x3f, 0x7b,
	0x37, 0xc2, 0x19, 0xfe, 0xa7, 0x3d, 0x43, 0x4b, 0xef, 0xe6, 0x8f, 0x3f, 0xb8, 0xe9, 0x7c, 0xf4,
	0xab, 0xf3, 0xd1, 0xef, 0xce, 0x1f, 0x7c, 0xbb, 0xf3, 0x07, 0x3f, 0xee, 0x7c, 0x94, 0x8c, 0xcc,
	0x53, 0x7b, 0xf1, 0x37, 0x00, 0x00, 0xff, 0xff, 0x43, 0x90, 0xa3, 0x7b, 0xed, 0x02, 0x00, 0x00,
}
