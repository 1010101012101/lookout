// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: service_analyzer.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type EventResponse struct {
	Comments []*Comment `protobuf:"bytes,1,rep,name=comments" json:"comments,omitempty"`
}

func (m *EventResponse) Reset()                    { *m = EventResponse{} }
func (m *EventResponse) String() string            { return proto.CompactTextString(m) }
func (*EventResponse) ProtoMessage()               {}
func (*EventResponse) Descriptor() ([]byte, []int) { return fileDescriptorServiceAnalyzer, []int{0} }

// Comment is a comment on a commit or changeset.
type Comment struct {
	// File this comment belongs to. If empty, it is a global comment.
	File string `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	// Line this comment refers to. If 0 (and file is set), it is a
	// file-level comment. Line is expressed aqs a 1-based index.
	Line int32 `protobuf:"varint,2,opt,name=line,proto3" json:"line,omitempty"`
	// Text of the comment.
	Text string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	// Confidence in the comment. It should be an integer between 0 and 100.
	Confidence uint32 `protobuf:"varint,4,opt,name=confidence,proto3" json:"confidence,omitempty"`
}

func (m *Comment) Reset()                    { *m = Comment{} }
func (m *Comment) String() string            { return proto.CompactTextString(m) }
func (*Comment) ProtoMessage()               {}
func (*Comment) Descriptor() ([]byte, []int) { return fileDescriptorServiceAnalyzer, []int{1} }

func init() {
	proto.RegisterType((*EventResponse)(nil), "pb.EventResponse")
	proto.RegisterType((*Comment)(nil), "pb.Comment")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Analyzer service

type AnalyzerClient interface {
	NotifyPullRequestEvent(ctx context.Context, in *PullRequestEvent, opts ...grpc.CallOption) (*EventResponse, error)
	NotifyPushEvent(ctx context.Context, in *PushEvent, opts ...grpc.CallOption) (*EventResponse, error)
}

type analyzerClient struct {
	cc *grpc.ClientConn
}

func NewAnalyzerClient(cc *grpc.ClientConn) AnalyzerClient {
	return &analyzerClient{cc}
}

func (c *analyzerClient) NotifyPullRequestEvent(ctx context.Context, in *PullRequestEvent, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := grpc.Invoke(ctx, "/pb.Analyzer/NotifyPullRequestEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyzerClient) NotifyPushEvent(ctx context.Context, in *PushEvent, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := grpc.Invoke(ctx, "/pb.Analyzer/NotifyPushEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Analyzer service

type AnalyzerServer interface {
	NotifyPullRequestEvent(context.Context, *PullRequestEvent) (*EventResponse, error)
	NotifyPushEvent(context.Context, *PushEvent) (*EventResponse, error)
}

func RegisterAnalyzerServer(s *grpc.Server, srv AnalyzerServer) {
	s.RegisterService(&_Analyzer_serviceDesc, srv)
}

func _Analyzer_NotifyPullRequestEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullRequestEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyzerServer).NotifyPullRequestEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Analyzer/NotifyPullRequestEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyzerServer).NotifyPullRequestEvent(ctx, req.(*PullRequestEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analyzer_NotifyPushEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyzerServer).NotifyPushEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Analyzer/NotifyPushEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyzerServer).NotifyPushEvent(ctx, req.(*PushEvent))
	}
	return interceptor(ctx, in, info, handler)
}

var _Analyzer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Analyzer",
	HandlerType: (*AnalyzerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyPullRequestEvent",
			Handler:    _Analyzer_NotifyPullRequestEvent_Handler,
		},
		{
			MethodName: "NotifyPushEvent",
			Handler:    _Analyzer_NotifyPushEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_analyzer.proto",
}

func (m *EventResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Comments) > 0 {
		for _, msg := range m.Comments {
			dAtA[i] = 0xa
			i++
			i = encodeVarintServiceAnalyzer(dAtA, i, uint64(msg.ProtoSize()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Comment) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Comment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.File) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintServiceAnalyzer(dAtA, i, uint64(len(m.File)))
		i += copy(dAtA[i:], m.File)
	}
	if m.Line != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintServiceAnalyzer(dAtA, i, uint64(m.Line))
	}
	if len(m.Text) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintServiceAnalyzer(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	if m.Confidence != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintServiceAnalyzer(dAtA, i, uint64(m.Confidence))
	}
	return i, nil
}

func encodeVarintServiceAnalyzer(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *EventResponse) ProtoSize() (n int) {
	var l int
	_ = l
	if len(m.Comments) > 0 {
		for _, e := range m.Comments {
			l = e.ProtoSize()
			n += 1 + l + sovServiceAnalyzer(uint64(l))
		}
	}
	return n
}

func (m *Comment) ProtoSize() (n int) {
	var l int
	_ = l
	l = len(m.File)
	if l > 0 {
		n += 1 + l + sovServiceAnalyzer(uint64(l))
	}
	if m.Line != 0 {
		n += 1 + sovServiceAnalyzer(uint64(m.Line))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovServiceAnalyzer(uint64(l))
	}
	if m.Confidence != 0 {
		n += 1 + sovServiceAnalyzer(uint64(m.Confidence))
	}
	return n
}

func sovServiceAnalyzer(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozServiceAnalyzer(x uint64) (n int) {
	return sovServiceAnalyzer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceAnalyzer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceAnalyzer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceAnalyzer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comments = append(m.Comments, &Comment{})
			if err := m.Comments[len(m.Comments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceAnalyzer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceAnalyzer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Comment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceAnalyzer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Comment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Comment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceAnalyzer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceAnalyzer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.File = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Line", wireType)
			}
			m.Line = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceAnalyzer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Line |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceAnalyzer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceAnalyzer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confidence", wireType)
			}
			m.Confidence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceAnalyzer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Confidence |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipServiceAnalyzer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceAnalyzer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipServiceAnalyzer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowServiceAnalyzer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServiceAnalyzer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServiceAnalyzer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthServiceAnalyzer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowServiceAnalyzer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipServiceAnalyzer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthServiceAnalyzer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowServiceAnalyzer   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("service_analyzer.proto", fileDescriptorServiceAnalyzer) }

var fileDescriptorServiceAnalyzer = []byte{
	// 296 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x41, 0x4e, 0xeb, 0x30,
	0x10, 0x86, 0xeb, 0xb6, 0xef, 0x51, 0x5c, 0x55, 0x08, 0x0b, 0x55, 0x56, 0x17, 0x56, 0xd4, 0x0d,
	0xd9, 0x90, 0x4a, 0xed, 0x86, 0x6d, 0x41, 0x6c, 0x11, 0xf2, 0x05, 0x50, 0x13, 0x26, 0xa9, 0xa5,
	0xc4, 0x0e, 0xb1, 0x53, 0x51, 0x96, 0x9c, 0x80, 0x23, 0x70, 0x9c, 0x2e, 0x39, 0x02, 0xa4, 0x17,
	0x41, 0xb6, 0x03, 0x02, 0xc4, 0xee, 0xff, 0xbe, 0xc9, 0x1f, 0xcd, 0x18, 0x8f, 0x35, 0x54, 0x1b,
	0x91, 0xc0, 0xed, 0x4a, 0xae, 0xf2, 0xed, 0x23, 0x54, 0x51, 0x59, 0x29, 0xa3, 0x48, 0xb7, 0x8c,
	0x27, 0x67, 0x99, 0x30, 0xeb, 0x3a, 0x8e, 0x12, 0x55, 0xcc, 0x32, 0x95, 0xa9, 0x99, 0x1b, 0xc5,
	0x75, 0xea, 0xc8, 0x81, 0x4b, 0xbe, 0x32, 0x19, 0xc2, 0x06, 0xa4, 0xf1, 0x30, 0x3d, 0xc7, 0xa3,
	0x2b, 0x8b, 0x1c, 0x74, 0xa9, 0xa4, 0x06, 0x72, 0x8a, 0x07, 0x89, 0x2a, 0x0a, 0x90, 0x46, 0x53,
	0x14, 0xf4, 0xc2, 0xe1, 0x7c, 0x18, 0x95, 0x71, 0x74, 0xe9, 0x1d, 0xff, 0x1a, 0x4e, 0x01, 0x1f,
	0xb4, 0x92, 0x10, 0xdc, 0x4f, 0x45, 0x0e, 0x14, 0x05, 0x28, 0x3c, 0xe4, 0x2e, 0x5b, 0x97, 0x0b,
	0x09, 0xb4, 0x1b, 0xa0, 0xf0, 0x1f, 0x77, 0xd9, 0x3a, 0x03, 0x0f, 0x86, 0xf6, 0xfc, 0x77, 0x36,
	0x13, 0x86, 0x71, 0xa2, 0x64, 0x2a, 0xee, 0x40, 0x26, 0x40, 0xfb, 0x01, 0x0a, 0x47, 0xfc, 0x9b,
	0x99, 0x3f, 0x21, 0x3c, 0x58, 0xb6, 0x37, 0x93, 0x25, 0x1e, 0x5f, 0x2b, 0x23, 0xd2, 0xed, 0x4d,
	0x9d, 0xe7, 0x1c, 0xee, 0x6b, 0xd0, 0xc6, 0xad, 0x4f, 0x4e, 0xec, 0x92, 0xbf, 0xed, 0xe4, 0xd8,
	0xda, 0x9f, 0xf7, 0x2d, 0xf0, 0xd1, 0xe7, 0x2f, 0xf4, 0xda, 0x77, 0x47, 0xbe, 0xdb, 0xe2, 0x1f,
	0xa5, 0x0b, 0xba, 0x7b, 0x67, 0x9d, 0x5d, 0xc3, 0xd0, 0x6b, 0xc3, 0xd0, 0x5b, 0xc3, 0x3a, 0xcf,
	0x7b, 0xd6, 0x79, 0xd9, 0x33, 0x14, 0xff, 0x77, 0xcf, 0xb8, 0xf8, 0x08, 0x00, 0x00, 0xff, 0xff,
	0xcc, 0x31, 0x31, 0xb8, 0xa0, 0x01, 0x00, 0x00,
}
