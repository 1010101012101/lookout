syntax = "proto3";
package github.com.srcd.lookout;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "gopkg.in/bblfsh/sdk.v1/uast/generated.proto";

option go_package = "api";

// UAST uses protosizer instead of sizer, this is required for interoperability
// with the generated proto from bblfsh.
option (gogoproto.sizer_all) = false;
option (gogoproto.protosizer_all) = true;

message File {
    // File path.
    string path = 1;
    // POSIX-style file mode.
    uint32 mode = 2;
    // SHA1 of the file contents.
    string sha1 = 3;
    // Raw content of the file.
    bytes content = 4;
    // UAST.
    gopkg.in.bblfsh.sdk.v1.uast.Node uast = 5;
}

message Change {
    File old = 1;
    File new = 2;
}

message ChangesRequest {
    string repository = 1;
    string base = 2;
    string top = 3;
    string include_pattern = 4;
    string exclude_pattern = 5;
    bool changed_only = 6;
    bool want_contents = 7;
    bool want_uast = 8;
}

// Data services exposes VCS repositories.
service Data {
    rpc GetChanges (ChangesRequest) returns (stream Change);
}

message AnalysisRequest {
    string repository = 2;
    string base_hash = 3;
    string new_hash = 4;
}

message AnalysisResponse {
    string status = 1;
}

// Analyzer service should be implemented by analyzers to receive analysis
// requests from the server. It is currently implemented as a single long-lived
// request, so cancellation is managed at gRPC level. Depending on how we plan
// to implement the server, we might want to implement sending results as a
// callback. For now, this is kept simple.
service Analyzer {
    rpc Analyze (AnalysisRequest) returns (AnalysisResponse);
}
